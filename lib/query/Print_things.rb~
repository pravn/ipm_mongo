$LOAD_PATH << '.'
class Print_things  #< Mongo_ops
#  include Mongo_ops

  def self.print_cputime_comm_scatter(file_name)
    file=File.new(file_name,"w")
    h=Query_operations.return_cputime_comm("banner.wallclock"=>{"$gt"=>1200})

    h.each do 
      |x|
      x.each do 
        |cputime,pcomm| 
        file.print cputime,"\t\t", pcomm, "\n"
      end
    end
    file.close
  end


  def self.print_cputime_concurrency_scatter(file_name)
    file=File.new(file_name,"w")
    h=Query_operations.return_cputime_concurrency("banner.wallclock"=>{"$gt"=>1200})

    h.each do 
      |x|
      x.each do 
        |cputime,conc| 
        file.print cputime,"\t\t", conc, "\n"
      end
    end
    file.close
  end
  

def self.print_comm_wallimb_scatter(file_name)
  file=File.new(file_name,"w")
  h=Query_operations.return_attr("banner.%comm","wallclock","banner.wallclock"=>{"$gt"=>1200})

  h.each do 
    |x|
    x.each do 
      |key, value|
      pimb=key
      pcomm=value
      file.print pimb, "\t\t", pcomm, "\n"
    end
  end
  file.close
end

def self.print_comm_commimb_scatter(file_name)
  file=File.new(file_name,"w")
  h=Query_operations.return_attr("banner.%comm","comm","banner.wallclock"=>{"$gt"=>1200})

  h.each do 
    |x|
    x.each do 
      |key, value|
      pimb=key
      pcomm=value
      file.print pimb, "\t\t", pcomm, "\n"
    end
  end
  file.close
end
  
def self.print_concurrency_comm(file_name)
  file=File.new(file_name,"w")
  h=Query_operations.return_concurrency_comm("banner.wallclock"=>{"$gt"=>1200})
  
  h.each do 
    |x|
    x.each do 
      |key, value|
      tasks=key
      comm=value

      #          puts tasks.inspect, "\t", comm.inspect
      file.print tasks, "\t\t", comm, "\n"

    end
  end
  file.close
end


def self.print_wall_wallimb_scatter(file_name)
  file=File.new(file_name,"w")
  h=Query_operations.return_attr("banner.wallclock","wallclock","banner.wallclock"=>{"$gt"=>1200})
  
  h.each do 
    |x|
    x.each do 
      |key,value|
      pimb=key
      wallclock=value

      puts pimb.inspect, "\t", wallclock.inspect
      file.print pimb, "\t\t", wallclock, "\n"
    end

  end

  file.close
end

  def self.print_wall_commimb_scatter(file_name)
    file=File.new(file_name,"w")
    h=Query_operations.return_attr("banner.wallclock","comm","banner.wallclock"=>{"$gt"=>1200})
    
    h.each do 
      |x|
      x.each do 
        |key,value|
        pimb=key
        wallclock=value

        puts pimb.inspect, "\t", wallclock.inspect
        file.print pimb, "\t\t", wallclock, "\n"
      end

    end

    file.close
  end

    def self.print_wall_ioimb_scatter(file_name)
      file=File.new(file_name,"w")
      h=Query_operations.return_attr("banner.wallclock","gbytes","banner.wallclock"=>{"$gt"=>1200})
      
      h.each do 
        |x|
        x.each do 
          |key,value|
          pimb=key
          wallclock=value

          puts pimb.inspect, "\t", wallclock.inspect
          file.print pimb, "\t\t", wallclock, "\n"
        end

      end

      file.close
    end

     def self.print_wallimb_commimb_scatter(file_name)
       file=File.new(file_name,"w")
       h=Query_operations.return_imb_correlation_attr("comm","banner.wallclock"=>{"$gt"=>1200})
       
       h.each do 
         |x|
         x.each do 
           |key,value|
           pimb_wall=key
           pimb_comm=value

           #          puts pimb_wall.inspect, "\t", pimb_comm.inspect
           file.print pimb_wall, "\t\t", pimb_comm, "\n"
         end

       end

       file.close
     end

    def self.print_wallimb_ioimb_scatter(file_name)
      file=File.new(file_name,"w")
      h=Query_operations.return_imb_correlation_attr("gbytes","banner.wallclock"=>{"$gt"=>1200})
      
      h.each do 
        |x|
        x.each do 
          |key,value|
          pimb_wall=key
          pimb_io=value

          file.print pimb_wall, "\t\t", pimb_io, "\n"
        end

      end

      file.close
    end

    def self.print_allreduce_attributes
	    #print various metrics appertaining to allreduce
	    h=Query_operations.return_allreduce_attr("banner.wallclock"=>{"$gt"=>1200})
	    
	    #open files for writing
	    file1=File.new("data/allreduce_wall.txt","w")
#	    file2=File.new("allreduce_conc","w")
#	    file3=File.new("allreduce_commimb","w")

	    #pull out quantities buried in the array of hashes thus contained within
	    h.each do 
		   |x|
		   file1.print(x["wallclock"],"\t",x["commimb"],"\t",x["allred_imb"], "\n")
	    end
	    file1.close

	    #put others 
    end

    def self.print_alltoall_attributes
	    #print various metrics appertaining to allreduce
	    h=Query_operations.return_alltoall_attr("banner.wallclock"=>{"$gt"=>1200})
	    
	    #open files for writing
	    file1=File.new("data/alltoall_wall.txt","w")
#	    file2=File.new("allreduce_conc","w")
#	    file3=File.new("allreduce_commimb","w")

	    #pull out quantities buried in the array of hashes thus contained within
	    h.each do 
		   |x|
		   file1.print(x["wallclock"],"\t",x["commimb"],"\t",x["alltoall_imb"], "\n")
	    end
	    file1.close

	    #put others 
    end



    def self.print_imb_to_file(file_name, imb_attribute)
      file=File.new("data/#{file_name}","w")
      #    puts imb_attribute.inspect
      #    file.print "0.01\t", sumwall(imb_attribute=>{"$gte"=>00, "$lte"=>10000000}), "\n"
      file.print "0.01\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>0.01}), "\n"
      file.print "0.05\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>0.05}), "\n"
      file.print "0.1\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>0.1}), "\n"
      file.print "0.5\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>0.5}), "\n"
      file.print "1.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>1.0}), "\n"
      file.print "5.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>5.0}), "\n"
      file.print "10.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>10.0}), "\n"
      file.print "10.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>15.0}), "\n"
      file.print "20.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>20.0}), "\n"
      file.print "30.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>30.0}), "\n"
      file.print "40.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>40.0}), "\n"
      file.print "50.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>50.0}), "\n"
      file.print "60.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>60.0}), "\n"
      file.print "70.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>70.0}), "\n"
      file.print "80.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>80.0}), "\n"
      file.print "90.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>90.0}), "\n"
      file.print "100.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>100.0}), "\n"
      file.print "300.0\t", Mongo_ops.sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>300.0}), "\n"
      #    file.print "400.0\t", sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>400.0}), "\n"
      #    file.print "2000.0\t", sumwall(imb_attribute=>{"$gte"=>0.0, "$lte"=>2000.0}), "\n"

      file.close
    end

end #end of class
